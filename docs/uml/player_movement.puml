@startuml Player Movement Components
!include styledefs.iuml

title Bright Souls - Player Movement Class Diagram\n

class Player $stereo("MonoBehaviour") implements IMotorTarget {
    '
    + $get $type("PlayerMotor") Motor
    + $get $type("Transform")   transform
    '
    --
    + $type("event") OnMove()
    + $type("event") OnHitGround()
    '
    --
    + $type("void") Move(movement)
    --
    $sep("Unity")
    - $type("void") Start()
    '
}

interface ICharacterMotor {
    + {abstract} $get $type("IMotorTarget") Target
    '
    + {abstract} $type("void") MoveTarget(direction)
}

class PlayerMotor implements ICharacterMotor {
    '
    + $get $type("IMotorTarget") Target
    --
    + $type("void") MoveTarget(direction)
    --
    '
    $sep("Unity")
    - $type("void") Update()
    - $type("void") FixedUpdate()
    '
    $sep("Physics")
    - $type("void") GravityUpdate()
    '
    $sep("Helpers")
    - $type("void") CheckGroundedStatus()
    - $type("void") CalculateFallDamage()
}

class PlayerBody {
    '
    $sep("Unity")
    - $type("void") Update()
    '
    $sep("Event Delegates")
    - $type("void") OnMove(direction)
    - $type("void") OnHitGround()
    '
    $sep("Helpers")
    - $type("void") FacePosition(position)
}

package GameData <<Database>> {
    class PlayerPhysicsData {
        + $get $type("float") MaxSpeed
        + $get $type("float") FallDamageMult
    }
}

package UnityEngine {
    class CharacterController {
        + $get $type("float") Radius
        + $get $type("float") Height
        + $get $type("float") SkinWidth
        '
        + $type("void") Move(movement)
    }
    abstract Physics {
        {static} $type("bool") SphereCast(ray, radius)
    }
}

interface IMotorTarget {
    + {abstract} $type("void") Move(movement)
}

Player *-- PlayerMotor
Player --> PlayerBody : Event\nSignals
PlayerMotor *-- PlayerPhysicsData
PlayerMotor::CheckGroundedStatus --> Physics::SphereCast
Player *-- CharacterController

note bottom of PlayerBody : Handles\nanimation.

@enduml